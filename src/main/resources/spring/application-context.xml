<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   	xmlns:c="http://www.springframework.org/schema/c"
	    xmlns:p="http://www.springframework.org/schema/p"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd">

<!-- 
	In above spring name space declaration, the version information is omitted 
	in it. The advantage of doing this is that, when the spring version is updated,
	the new definition specifications are automatically supported in configuration files.
 -->

	<!-- Following bean definition demonstrates the CI where it has reference and scalar type dependencies -->

	<bean id="complexBean0" class="spring.xmlannotationconfig.basics.beans.ComplexBean">
		<constructor-arg ref="scalarValueBean0"/>
		<constructor-arg type="boolean" value="true"/>
	</bean>

	<!-- Following bean definition demonstrates the CI where multiple params have same type-->

	<bean id="complexBean1" class="spring.xmlannotationconfig.basics.beans.ComplexBean2">
		<constructor-arg name="bean1" ref="scalarValueBean0"/>
		<constructor-arg name="bean2" ref="scalarValueBean1"/>
	</bean>

	<!-- Following bean definition demonstrates the SI  -->

	<bean id="scalarValueBean0" class="spring.xmlannotationconfig.basics.beans.ScalarValueBean">
		<property name="anInt" value="123"/>
		<property name="aBoolean" value="true"/>
		<property name="aFloat" value="3.14f"/>
		<property name="aDouble" value="180.6"/>
	</bean>

	<bean id="scalarValueBean1" class="spring.xmlannotationconfig.basics.beans.ScalarValueBean">
		<property name="anInt" value="345"/>
		<property name="aBoolean" value="false"/>
		<property name="aFloat" value="5.64f"/>
		<property name="aDouble" value="123"/>
	</bean>

	<!--
		Following bean definition is used to demonstrate the shortcut c-namespace usage for CI technique using params name
		c:{param-name}-ref - For reference type
		c:{param-name} - For primitive type
	 -->
	<bean id="complexBean2" class="spring.xmlannotationconfig.basics.beans.ComplexBean"
		  c:scalarValueBean-ref="scalarValueBean0"
	      c:complexBean="true"/>

	<!--
		Following bean definition is used to demonstrate the shortcut c-namespace index usage for CI technique using
		index value.
		c:_{index}-ref - For reference type
		c:_{index} - For primitive type
	-->

	<bean id="complexBean3" class="spring.xmlannotationconfig.basics.beans.ComplexBean"
			c:_0-ref="scalarValueBean0"
			c:_1="false"/>

	<!--
		Following bean definition is used to demonstrate the shortcut p-namespace usage for setter injection technique
		using params.
		p:{param}-ref - For reference type
		p:{param} - For primitive type
	-->
	<bean id="scalarValueBean2" class="spring.xmlannotationconfig.basics.beans.ScalarValueBean"
		p:anInt="345" p:aFloat="4.56f"
		p:aBoolean="false" p:aDouble="7.89"/>

	<!--
		Following bean definition is used to demonstrate the use of static factory method to create bean.
	-->
	<bean id="staticFactoryBean" class="spring.xmlannotationconfig.basics.beans.ComplexBeanFactory" factory-method="getComplexBean"
		  c:valueBean-ref="scalarValueBean2" c:isComplex="true"/>

	<!--
	 	Following bean definition is used to demonstrate the use of instance (non-static) method to create bean
	 -->

	<bean id="complexFactoryBean" class="spring.xmlannotationconfig.basics.beans.ComplexBeanFactory"/>
	<bean id="instanceFactoryBean" factory-bean="complexFactoryBean" factory-method="getBean"
		  c:valueBean-ref="scalarValueBean2" c:isComplex="true"/>

</beans>